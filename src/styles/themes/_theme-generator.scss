/*!
 * Shaj Theme Generator
 * Mixins and functions for generating and applying themes
 */

@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:color';
@use 'theme-variables' as vars;

// Generate CSS custom properties from theme configuration
@mixin generate-theme-properties($theme-name, $theme-config) {
  $theme: vars.merge-theme($theme-config);

  // Generate color properties
  @include generate-color-properties($theme-name, map-get($theme, 'primary'), 'primary');
  @include generate-color-properties($theme-name, map-get($theme, 'secondary'), 'secondary');
  @include generate-color-properties($theme-name, map-get($theme, 'neutral'), 'neutral');

  // Generate semantic color properties
  @include generate-semantic-color-properties($theme-name, $theme);

  // Generate typography properties
  @include generate-typography-properties($theme-name, map-get($theme, 'typography'));

  // Generate spacing properties
  @include generate-spacing-properties($theme-name, map-get($theme, 'spacing'));

  // Generate border radius properties
  @include generate-border-radius-properties($theme-name, map-get($theme, 'border-radius'));

  // Generate shadow properties
  @include generate-shadow-properties($theme-name, map-get($theme, 'shadows'));

  // Generate animation properties
  @include generate-animation-properties($theme-name, map-get($theme, 'animation'));

  // Generate component properties
  @include generate-component-properties($theme-name, map-get($theme, 'components'));

  // Generate surface properties
  @include generate-surface-properties($theme-name, $theme);
}

// Generate color scale properties (50-900)
@mixin generate-color-properties($theme-name, $color-map, $color-name) {
  @if $color-map {
    @each $shade, $value in $color-map {
      #{vars.css-var-name($color-name, $shade)}: #{$value};
    }
  }
}

// Generate semantic color properties
@mixin generate-semantic-color-properties($theme-name, $theme) {
  #{vars.css-var-name('success')}: #{map-get($theme, 'success')};
  #{vars.css-var-name('warning')}: #{map-get($theme, 'warning')};
  #{vars.css-var-name('error')}: #{map-get($theme, 'error')};
  #{vars.css-var-name('info')}: #{map-get($theme, 'info')};
}

// Generate typography properties
@mixin generate-typography-properties($theme-name, $typography) {
  @if $typography {
    $font-family: map-get($typography, 'font-family');
    @if $font-family {
      #{vars.css-var-name('font-family')}: #{$font-family};
    }

    $font-weights: map-get($typography, 'font-weights');
    @if $font-weights {
      @each $weight, $value in $font-weights {
        #{vars.css-var-name('font-weight', $weight)}: #{$value};
      }
    }

    $font-sizes: map-get($typography, 'font-sizes');
    @if $font-sizes {
      @each $size, $value in $font-sizes {
        #{vars.css-var-name('font-size', $size)}: #{$value};
      }
    }

    $line-heights: map-get($typography, 'line-heights');
    @if $line-heights {
      @each $height, $value in $line-heights {
        #{vars.css-var-name('line-height', $height)}: #{$value};
      }
    }

    $letter-spacing: map-get($typography, 'letter-spacing');
    @if $letter-spacing {
      @each $spacing, $value in $letter-spacing {
        #{vars.css-var-name('letter-spacing', $spacing)}: #{$value};
      }
    }
  }
}

// Generate spacing properties
@mixin generate-spacing-properties($theme-name, $spacing) {
  @if $spacing {
    @each $size, $value in $spacing {
      #{vars.css-var-name('spacing', $size)}: #{$value};
    }
  }
}

// Generate border radius properties
@mixin generate-border-radius-properties($theme-name, $border-radius) {
  @if $border-radius {
    @each $size, $value in $border-radius {
      #{vars.css-var-name('border-radius', $size)}: #{$value};
    }
  }
}

// Generate shadow properties
@mixin generate-shadow-properties($theme-name, $shadows) {
  @if $shadows {
    @each $size, $value in $shadows {
      #{vars.css-var-name('shadow', $size)}: #{$value};
    }
  }
}

// Generate animation properties
@mixin generate-animation-properties($theme-name, $animation) {
  @if $animation {
    $duration: map-get($animation, 'duration');
    @if $duration {
      @each $speed, $value in $duration {
        #{vars.css-var-name('duration', $speed)}: #{$value};
      }
    }

    $timing: map-get($animation, 'timing');
    @if $timing {
      @each $curve, $value in $timing {
        #{vars.css-var-name('timing', $curve)}: #{$value};
      }
    }
  }
}

// Generate component-specific properties
@mixin generate-component-properties($theme-name, $components) {
  @if $components {
    @each $component, $properties in $components {
      @each $property, $value in $properties {
        #{vars.css-var-name('component', $component, $property)}: #{$value};
      }
    }
  }
}

// Generate surface properties
@mixin generate-surface-properties($theme-name, $theme) {
  #{vars.css-var-name('background')}: #{map-get($theme, 'background')};
  #{vars.css-var-name('surface')}: #{map-get($theme, 'surface')};
  #{vars.css-var-name('surface-variant')}: #{map-get($theme, 'surface-variant')};
}

// Apply theme to root or specific selector
@mixin apply-theme($theme-name, $theme-config, $selector: ':root') {
  #{$selector} {
    @include generate-theme-properties($theme-name, $theme-config);
  }
}

// Apply theme with data attribute
@mixin apply-theme-data-attribute($theme-name, $theme-config) {
  [data-theme='#{$theme-name}'] {
    @include generate-theme-properties($theme-name, $theme-config);
  }
}

// Generate all themes with data attributes
@mixin generate-all-themes($themes) {
  @each $theme-name, $theme-config in $themes {
    @include apply-theme-data-attribute($theme-name, $theme-config);
  }
}

// Generate theme-aware component styles
@mixin theme-aware-component($component-name, $theme-specific-styles: ()) {
  .c-#{$component-name} {
    // Base styles using theme variables
    @content;

    // Apply theme-specific styles if provided
    @if length($theme-specific-styles) > 0 {
      @each $theme-name, $styles in $theme-specific-styles {
        [data-theme='#{$theme-name}'] & {
          @each $property, $value in $styles {
            #{$property}: #{$value};
          }
        }
      }
    }
  }
}

// Generate color utilities for a theme
@mixin generate-color-utilities($theme-name, $theme-config) {
  $theme: vars.merge-theme($theme-config);

  // Text color utilities
  @each $color-name in ('primary', 'secondary', 'neutral') {
    $color-map: map-get($theme, $color-name);
    @if $color-map {
      @each $shade, $value in $color-map {
        .u-text-#{$color-name}-#{$shade} {
          color: var(#{vars.css-var-name($color-name, $shade)}) !important;
        }
      }
    }
  }

  // Background color utilities
  @each $color-name in ('primary', 'secondary', 'neutral') {
    $color-map: map-get($theme, $color-name);
    @if $color-map {
      @each $shade, $value in $color-map {
        .u-bg-#{$color-name}-#{$shade} {
          background-color: var(#{vars.css-var-name($color-name, $shade)}) !important;
        }
      }
    }
  }

  // Border color utilities
  @each $color-name in ('primary', 'secondary', 'neutral') {
    $color-map: map-get($theme, $color-name);
    @if $color-map {
      @each $shade, $value in $color-map {
        .u-border-#{$color-name}-#{$shade} {
          border-color: var(#{vars.css-var-name($color-name, $shade)}) !important;
        }
      }
    }
  }

  // Semantic color utilities
  @each $semantic in ('success', 'warning', 'error', 'info') {
    .u-text-#{$semantic} {
      color: var(#{vars.css-var-name($semantic)}) !important;
    }

    .u-bg-#{$semantic} {
      background-color: var(#{vars.css-var-name($semantic)}) !important;
    }

    .u-border-#{$semantic} {
      border-color: var(#{vars.css-var-name($semantic)}) !important;
    }
  }
}

// Generate spacing utilities for a theme
@mixin generate-spacing-utilities($theme-name, $theme-config) {
  $theme: vars.merge-theme($theme-config);
  $spacing: map-get($theme, 'spacing');

  @if $spacing {
    @each $size, $value in $spacing {
      // Margin utilities
      .u-m-#{$size} {
        margin: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-mt-#{$size} {
        margin-top: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-mr-#{$size} {
        margin-right: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-mb-#{$size} {
        margin-bottom: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-ml-#{$size} {
        margin-left: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-mx-#{$size} {
        margin-left: var(#{vars.css-var-name('spacing', $size)}) !important;
        margin-right: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-my-#{$size} {
        margin-top: var(#{vars.css-var-name('spacing', $size)}) !important;
        margin-bottom: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      // Padding utilities
      .u-p-#{$size} {
        padding: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-pt-#{$size} {
        padding-top: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-pr-#{$size} {
        padding-right: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-pb-#{$size} {
        padding-bottom: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-pl-#{$size} {
        padding-left: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-px-#{$size} {
        padding-left: var(#{vars.css-var-name('spacing', $size)}) !important;
        padding-right: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      .u-py-#{$size} {
        padding-top: var(#{vars.css-var-name('spacing', $size)}) !important;
        padding-bottom: var(#{vars.css-var-name('spacing', $size)}) !important;
      }

      // Gap utilities
      .u-gap-#{$size} {
        gap: var(#{vars.css-var-name('spacing', $size)}) !important;
      }
    }
  }
}

// Helper function to get theme color
@function get-color($color-name, $shade: 500) {
  @return var(#{vars.css-var-name($color-name, $shade)});
}

// Helper function to get theme spacing
@function get-spacing($size) {
  @return var(#{vars.css-var-name('spacing', $size)});
}

// Helper function to get theme border radius
@function get-border-radius($size) {
  @return var(#{vars.css-var-name('border-radius', $size)});
}

// Helper function to get theme shadow
@function get-shadow($size) {
  @return var(#{vars.css-var-name('shadow', $size)});
}

// Helper function to get component property
@function get-component-property($component, $property) {
  @return var(#{vars.css-var-name('component', $component, $property)});
}

// Accessibility testing mixin
@mixin test-contrast($color1, $shade1, $color2, $shade2: null) {
  @if $shade2 {
    // Test contrast between two theme colors
    // This would integrate with an accessibility testing tool
    @warn "Testing contrast between #{$color1}-#{$shade1} and #{$color2}-#{$shade2}";
  } @else {
    // Test contrast between theme color and fixed color
    @warn "Testing contrast between #{$color1}-#{$shade1} and #{$color2}";
  }
}

// Dark mode support mixin
@mixin dark-mode-support($light-theme-config, $dark-theme-config) {
  // Light mode (default)
  @include apply-theme('light', $light-theme-config);

  // Dark mode
  @media (prefers-color-scheme: dark) {
    @include apply-theme('dark', $dark-theme-config);
  }

  // Explicit dark mode
  [data-theme='dark'] {
    @include generate-theme-properties('dark', $dark-theme-config);
  }
}

// High contrast mode support
@mixin high-contrast-support($theme-config) {
  @media (prefers-contrast: high) {
    // Enhance contrast for accessibility
    :root {
      // Increase contrast ratios
      #{vars.css-var-name('primary', 500)}: #{color.scale(
          map-get($theme-config, 'primary', 500),
          $lightness: -20%
        )};
      #{vars.css-var-name('secondary', 500)}: #{color.scale(
          map-get($theme-config, 'secondary', 500),
          $lightness: -20%
        )};

      // Increase border widths
      #{vars.css-var-name('component', 'button', 'border-width')}: 2px;
      #{vars.css-var-name('component', 'input', 'border-width')}: 2px;
      #{vars.css-var-name('component', 'card', 'border-width')}: 2px;
    }
  }
}

// Reduced motion support
@mixin reduced-motion-support() {
  @media (prefers-reduced-motion: reduce) {
    :root {
      #{vars.css-var-name('duration', 'fast')}: 0ms;
      #{vars.css-var-name('duration', 'base')}: 0ms;
      #{vars.css-var-name('duration', 'slow')}: 0ms;
      #{vars.css-var-name('timing', 'bounce')}: linear;
    }
  }
}

// Debug theme mixin
@mixin debug-theme($theme-name, $theme-config) {
  @debug 'Theme: #{$theme-name}';
  @debug "Primary color: #{map-get($theme-config, 'primary', 500)}";
  @debug "Secondary color: #{map-get($theme-config, 'secondary', 500)}";
  @debug "Success color: #{map-get($theme-config, 'success')}";
  @debug "Error color: #{map-get($theme-config, 'error')}";
}
