/*!
 * Shaj Theme Variant Generator
 * Automatic generation of theme variations (light/dark, high contrast, seasonal, etc.)
 * This system allows creating multiple variants from a base theme configuration
 */

@use 'sass:map';
@use 'sass:color';
@use 'sass:math';
@use 'sass:string';

// Variant generation settings
$variant-types: (
  'light': (
    'background-lightness': 98%,
    'surface-lightness': 95%,
    'text-lightness': 15%,
    'contrast-ratio': 1,
  ),
  'dark': (
    'background-lightness': 8%,
    'surface-lightness': 12%,
    'text-lightness': 90%,
    'contrast-ratio': 1.2,
  ),
  'high-contrast': (
    'background-lightness': 5%,
    'surface-lightness': 10%,
    'text-lightness': 95%,
    'contrast-ratio': 2,
  ),
  'low-contrast': (
    'background-lightness': 85%,
    'surface-lightness': 88%,
    'text-lightness': 35%,
    'contrast-ratio': 0.7,
  ),
);

$seasonal-variants: (
  'spring': (
    'hue-shift': 20deg,
    'saturation-boost': 15%,
    'lightness-boost': 5%,
    'warmth': 'cool',
  ),
  'summer': (
    'hue-shift': -10deg,
    'saturation-boost': 25%,
    'lightness-boost': 10%,
    'warmth': 'warm',
  ),
  'autumn': (
    'hue-shift': 30deg,
    'saturation-boost': 20%,
    'lightness-boost': -5%,
    'warmth': 'warm',
  ),
  'winter': (
    'hue-shift': -20deg,
    'saturation-boost': -10%,
    'lightness-boost': -10%,
    'warmth': 'cool',
  ),
);

// Generate theme variant from base theme
@function generate-theme-variant($base-theme, $variant-type, $variant-config: ()) {
  $variant-theme: $base-theme;

  @if map.has-key($variant-types, $variant-type) {
    $variant-settings: map.get($variant-types, $variant-type);
    $variant-theme: apply-variant-settings($variant-theme, $variant-settings);
  }

  @if map.has-key($seasonal-variants, $variant-type) {
    $seasonal-settings: map.get($seasonal-variants, $variant-type);
    $variant-theme: apply-seasonal-settings($variant-theme, $seasonal-settings);
  }

  // Apply custom variant configuration
  @if length($variant-config) > 0 {
    $variant-theme: apply-custom-variant($variant-theme, $variant-config);
  }

  @return $variant-theme;
}

// Apply variant settings (light/dark/contrast)
@function apply-variant-settings($theme, $settings) {
  $updated-theme: $theme;

  // Update background colors
  @if map.has-key($settings, 'background-lightness') {
    $bg-lightness: map.get($settings, 'background-lightness');
    $updated-theme: map.set($updated-theme, 'background', hsl(0, 0%, $bg-lightness));
  }

  // Update surface colors
  @if map.has-key($settings, 'surface-lightness') {
    $surface-lightness: map.get($settings, 'surface-lightness');
    $updated-theme: map.set($updated-theme, 'colors', 'surface', hsl(0, 0%, $surface-lightness));
    $updated-theme: map.set(
      $updated-theme,
      'colors',
      'surface-variant',
      hsl(0, 0%, $surface-lightness + 3%)
    );
  }

  // Update text colors
  @if map.has-key($settings, 'text-lightness') {
    $text-lightness: map.get($settings, 'text-lightness');
    $updated-theme: map.set(
      $updated-theme,
      'colors',
      'neutral',
      '900',
      hsl(0, 0%, $text-lightness)
    );
    $updated-theme: map.set(
      $updated-theme,
      'colors',
      'neutral',
      '800',
      hsl(0, 0%, $text-lightness + 10%)
    );
    $updated-theme: map.set(
      $updated-theme,
      'colors',
      'neutral',
      '700',
      hsl(0, 0%, $text-lightness + 20%)
    );
  }

  // Apply contrast ratio adjustments
  @if map.has-key($settings, 'contrast-ratio') {
    $contrast-ratio: map.get($settings, 'contrast-ratio');
    $updated-theme: adjust-theme-contrast($updated-theme, $contrast-ratio);
  }

  @return $updated-theme;
}

// Apply seasonal color adjustments
@function apply-seasonal-settings($theme, $settings) {
  $updated-theme: $theme;

  @if map.has-key($settings, 'hue-shift') {
    $hue-shift: map.get($settings, 'hue-shift');
    $updated-theme: shift-theme-hue($updated-theme, $hue-shift);
  }

  @if map.has-key($settings, 'saturation-boost') {
    $saturation-boost: map.get($settings, 'saturation-boost');
    $updated-theme: adjust-theme-saturation($updated-theme, $saturation-boost);
  }

  @if map.has-key($settings, 'lightness-boost') {
    $lightness-boost: map.get($settings, 'lightness-boost');
    $updated-theme: adjust-theme-lightness($updated-theme, $lightness-boost);
  }

  @return $updated-theme;
}

// Apply custom variant configuration
@function apply-custom-variant($theme, $config) {
  $updated-theme: $theme;

  @each $key, $value in $config {
    @if $key == 'primary-hue' {
      $updated-theme: set-primary-hue($updated-theme, $value);
    } @else if $key == 'accent-color' {
      $updated-theme: set-accent-color($updated-theme, $value);
    } @else if $key == 'border-radius-scale' {
      $updated-theme: scale-border-radius($updated-theme, $value);
    } @else if $key == 'spacing-scale' {
      $updated-theme: scale-spacing($updated-theme, $value);
    }
  }

  @return $updated-theme;
}

// Utility functions for color manipulation
@function shift-theme-hue($theme, $hue-shift) {
  $colors: map.get($theme, 'colors');
  $updated-colors: ();

  @each $color-name, $color-scale in $colors {
    @if type-of($color-scale) == 'map' {
      $updated-scale: ();
      @each $shade, $color in $color-scale {
        $updated-scale: map.set($updated-scale, $shade, adjust-hue($color, $hue-shift));
      }
      $updated-colors: map.set($updated-colors, $color-name, $updated-scale);
    } @else {
      $updated-colors: map.set($updated-colors, $color-name, adjust-hue($color-scale, $hue-shift));
    }
  }

  @return map.set($theme, 'colors', $updated-colors);
}

@function adjust-theme-saturation($theme, $saturation-change) {
  $colors: map.get($theme, 'colors');
  $updated-colors: ();

  @each $color-name, $color-scale in $colors {
    @if type-of($color-scale) == 'map' {
      $updated-scale: ();
      @each $shade, $color in $color-scale {
        $current-saturation: saturation($color);
        $new-saturation: $current-saturation + $saturation-change;
        $new-saturation: math.max(0%, math.min(100%, $new-saturation));
        $updated-scale: map.set(
          $updated-scale,
          $shade,
          change-color($color, $saturation: $new-saturation)
        );
      }
      $updated-colors: map.set($updated-colors, $color-name, $updated-scale);
    } @else if $color-name != 'background' and $color-name != 'surface' {
      $current-saturation: saturation($color-scale);
      $new-saturation: $current-saturation + $saturation-change;
      $new-saturation: math.max(0%, math.min(100%, $new-saturation));
      $updated-colors: map.set(
        $updated-colors,
        $color-name,
        change-color($color-scale, $saturation: $new-saturation)
      );
    } @else {
      $updated-colors: map.set($updated-colors, $color-name, $color-scale);
    }
  }

  @return map.set($theme, 'colors', $updated-colors);
}

@function adjust-theme-lightness($theme, $lightness-change) {
  $colors: map.get($theme, 'colors');
  $updated-colors: ();

  @each $color-name, $color-scale in $colors {
    @if type-of($color-scale) == 'map' {
      $updated-scale: ();
      @each $shade, $color in $color-scale {
        $current-lightness: lightness($color);
        $new-lightness: $current-lightness + $lightness-change;
        $new-lightness: math.max(0%, math.min(100%, $new-lightness));
        $updated-scale: map.set(
          $updated-scale,
          $shade,
          change-color($color, $lightness: $new-lightness)
        );
      }
      $updated-colors: map.set($updated-colors, $color-name, $updated-scale);
    } @else {
      $current-lightness: lightness($color-scale);
      $new-lightness: $current-lightness + $lightness-change;
      $new-lightness: math.max(0%, math.min(100%, $new-lightness));
      $updated-colors: map.set(
        $updated-colors,
        $color-name,
        change-color($color-scale, $lightness: $new-lightness)
      );
    }
  }

  @return map.set($theme, 'colors', $updated-colors);
}

@function adjust-theme-contrast($theme, $contrast-ratio) {
  $colors: map.get($theme, 'colors');
  $updated-colors: ();

  @each $color-name, $color-scale in $colors {
    @if type-of($color-scale) == 'map' {
      $updated-scale: ();
      @each $shade, $color in $color-scale {
        $shade-number: if(type-of($shade) == 'number', $shade, string-to-number($shade));
        @if $shade-number {
          $contrast-adjustment: ($shade-number - 500) * $contrast-ratio * 0.1;
          $new-lightness: lightness($color) + $contrast-adjustment;
          $new-lightness: math.max(0%, math.min(100%, $new-lightness));
          $updated-scale: map.set(
            $updated-scale,
            $shade,
            change-color($color, $lightness: $new-lightness)
          );
        } @else {
          $updated-scale: map.set($updated-scale, $shade, $color);
        }
      }
      $updated-colors: map.set($updated-colors, $color-name, $updated-scale);
    } @else {
      $updated-colors: map.set($updated-colors, $color-name, $color-scale);
    }
  }

  @return map.set($theme, 'colors', $updated-colors);
}

// Helper function to convert string to number
@function string-to-number($string) {
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );
  $result: 0;
  $digits: 0;

  @for $i from 1 through string.length($string) {
    $char: string.slice($string, $i, $i);
    @if map.has-key($numbers, $char) {
      $result: $result * 10 + map.get($numbers, $char);
      $digits: $digits + 1;
    }
  }

  @return if($digits > 0, $result, null);
}

// Specialized variant functions
@function set-primary-hue($theme, $hue) {
  $primary-colors: map.get(map.get($theme, 'colors'), 'primary');
  $updated-primary: ();

  @each $shade, $color in $primary-colors {
    $updated-primary: map.set($updated-primary, $shade, change-color($color, $hue: $hue));
  }

  @return map.set(
    $theme,
    'colors',
    map.set(map.get($theme, 'colors'), 'primary', $updated-primary)
  );
}

@function set-accent-color($theme, $accent-color) {
  @return map.set($theme, 'colors', map.set(map.get($theme, 'colors'), 'secondary', $accent-color));
}

@function scale-border-radius($theme, $scale) {
  $border-radius: map.get($theme, 'border-radius');
  $updated-radius: ();

  @each $size, $value in $border-radius {
    $updated-radius: map.set($updated-radius, $size, $value * $scale);
  }

  @return map.set($theme, 'border-radius', $updated-radius);
}

@function scale-spacing($theme, $scale) {
  $spacing: map.get($theme, 'spacing');
  $updated-spacing: ();

  @each $size, $value in $spacing {
    $updated-spacing: map.set($updated-spacing, $size, $value * $scale);
  }

  @return map.set($theme, 'spacing', $updated-spacing);
}

// Mixin to generate all variants for a theme
@mixin generate-theme-variants($theme-name, $base-theme) {
  // Generate light/dark variants
  @each $variant-name, $variant-settings in $variant-types {
    $variant-theme: generate-theme-variant($base-theme, $variant-name);
    @include register-theme('#{$theme-name}-#{$variant-name}', $variant-theme);
  }

  // Generate seasonal variants
  @each $season, $seasonal-settings in $seasonal-variants {
    $seasonal-theme: generate-theme-variant($base-theme, $season);
    @include register-theme('#{$theme-name}-#{$season}', $seasonal-theme);
  }
}

// Mixin to generate accessibility variants
@mixin generate-accessibility-variants($theme-name, $base-theme) {
  // High contrast variant
  $high-contrast-theme: generate-theme-variant($base-theme, 'high-contrast');
  @include register-theme('#{$theme-name}-high-contrast', $high-contrast-theme);

  // Low contrast variant
  $low-contrast-theme: generate-theme-variant($base-theme, 'low-contrast');
  @include register-theme('#{$theme-name}-low-contrast', $low-contrast-theme);

  // Large text variant (increased spacing and font sizes)
  $large-text-config: (
    'spacing-scale': 1.25,
    'border-radius-scale': 1.15,
  );
  $large-text-theme: generate-theme-variant($base-theme, '', $large-text-config);
  @include register-theme('#{$theme-name}-large-text', $large-text-theme);
}

// Export variant generator functions for external use
@function get-variant-types() {
  @return $variant-types;
}

@function get-seasonal-variants() {
  @return $seasonal-variants;
}
